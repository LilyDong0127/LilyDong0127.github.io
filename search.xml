<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Deep Learning</title>
    <url>/2024/02/20/Deep-Learning/</url>
    <content><![CDATA[<p>课题研究相关，深度学习<br>了解深度学习库和深度学习API的基本功能：</p>
<ul>
<li>pytorch</li>
<li>TensorFlow</li>
</ul>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 使用教程</title>
    <url>/2024/02/06/markdown-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>段落换行是两个空格以上加上回车<br>段落后面使用一个空行来表示重新开始一个段落</p>
<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p>
<p>分割线：可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><del>删除线</del><br><u>带下划线文本</u></p>
<p>创建脚注格式类似这样 [^标注]。<br>[^标注]: 这是一个标注</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ol>
<li><p>第一项</p>
</li>
<li><p>第二项</p>
</li>
<li><p>第三项</p>
</li>
<li><p>第一项：</p>
<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li><p>第二项：</p>
<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<blockquote>
<p>区块引用</p>
</blockquote>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<p><code>printf()</code> 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;print&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2024/02/06/javascript/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用教程--自用版</title>
    <url>/2024/02/06/Hexo-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-%E8%87%AA%E7%94%A8%E7%89%88/</url>
    <content><![CDATA[<ul>
<li><strong>初始化博客,在指定的文件夹中初始化一个新的博客</strong><br><code>hexo init &lt;folder&gt;</code></li>
<li><strong>新建文章,可以指定标题</strong><br><code>hexo new &quot;title&quot;</code> </li>
<li><strong>生成静态文件</strong><br><code>hexo generate</code> 或 <code>hexo g</code> </li>
<li><strong>启动本地服务器</strong><br><code>hexo server</code> 或 <code>hexo s</code> </li>
<li><strong>清除缓存文件 (db.json) 和已生成的静态文件 (public)</strong><br><code>hexo clean</code> </li>
<li><strong>部署到远端</strong><br><code>hexo deploy</code> 或 <code>hexo d</code></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab学习笔记</title>
    <url>/2024/02/20/matlab/</url>
    <content><![CDATA[<p>matlab</p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习 --参考菜鸟教程Python3教程（windows版本）</title>
    <url>/2024/02/06/python/</url>
    <content><![CDATA[<h3 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h3><p><em>windows可以使用<code>win(windows键)+R</code>，打开输入<code>cmd</code>打开指令运行页面即可</em></p>
<p>常见指令有：</p>
<ul>
<li><code>python -V 或 python --version</code>可以查看下载的python版本</li>
<li>因为python有独特的交互式编程模式，输入指令<code>python</code>即可进入</li>
</ul>
<p>创建文件：</p>
<ul>
<li>创建的文件后缀为<code>.py</code></li>
<li>如果需要运行文件，请输入命令<code>python ***.py</code>，即可运行文件</li>
</ul>
<blockquote>
<p><em>python是一种解释性语言（没有编译过程），是一种面向对象的编程语言（Python支持面向对象的风格或代码封装在对象的编程技术），是一种交互式语言（输入<code>python</code>后，在<code>&gt;&gt;&gt;</code>后可以输入代码直接执行</em></p>
<blockquote>
<p>这里下载安装python的具体步骤暂时不提，主要集中于python的数据结构，语法和项目等</p>
</blockquote>
</blockquote>
<h3 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h3><p>  保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：<br><code>[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</code></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>单行注释：<code>#</code></li>
<li>多行注释：<code>&#39;&#39;&#39;*&#39;&#39;&#39;</code>或者<code>&quot;&quot;&quot;**&quot;&quot;&quot;</code></li>
</ul>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ul>
<li>在 python 用 import 或者 from…import 来导入相应的模块。</li>
<li>将整个模块(somemodule)导入，格式为：import somemodule</li>
<li>从某个模块中导入某个函数,格式为：from somemodule import somefunction</li>
<li>从某个模块中导入多个函数,格式为：from somemodule import firstfunc,secondfunc,thirdfunc</li>
<li>将某个模块中的全部函数导入，格式为：from somemodule import *</li>
</ul>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul>
<li>python中，标识符由数字，字母，下划线组成（无其他组成成分），但是不可以以数字开头，且区分大小写</li>
<li>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入.</li>
<li>以双下划线开头的 ‘__foo’ 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__</code> 代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li>
</ul>
<h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><ul>
<li>python不用大括号<code>&#123;&#125;</code>来表达一个类，而是用相同的缩进来代表一个模块。</li>
<li><em>缩进不一样会导致运行错误，请注意~</em></li>
<li>如果一行太长了，可以使用反斜杠进行断句<code>\</code></li>
</ul>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>利用print输出，<code>print()</code></p>
<h3 id="python3基本数据类型"><a href="#python3基本数据类型" class="headerlink" title="python3基本数据类型"></a>python3基本数据类型</h3><ul>
<li>python中，变量不需要声明，但是使用前必须赋值！(用等号即赋值)只有赋值操作之后，这个变量才会被创建。</li>
<li>Python3 中常见的数据类型有：<ul>
<li>Number（数字）</li>
<li>String（字符串）</li>
<li>bool（布尔类型）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
</li>
<li>Python3 的六个标准数据类型中：<ul>
<li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li>
<li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li>
</ul>
</li>
<li>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</li>
</ul>
<h4 id="数字类型-Number"><a href="#数字类型-Number" class="headerlink" title="数字类型(Number)"></a>数字类型(Number)</h4><ul>
<li>整数：int (整数), 如 1，2，3等, 只有一种整数类型 int，表示为长整型。<em>没有 python2 中的 Long</em></li>
<li>浮点数：float,如1.2等</li>
<li>布尔型：bool (布尔), 只有True或false。</li>
<li>复数：complex (复数),如j，2+j等</li>
<li>内置type()函数可以用来查询变量所指的对象类型，或者用isinstance()方法进行判断<ul>
<li>isinstance 和 type 的区别在于：type()不会认为子类是一种父类类型。isinstance()会认为子类是一种父类类型。</li>
</ul>
</li>
</ul>
<h4 id="字符串类型-String"><a href="#字符串类型-String" class="headerlink" title="字符串类型(String)"></a>字符串类型(String)</h4><ul>
<li>Python中单引号’和双引号”使用完全相同(但是不可以混用，单引号用单引号结尾，双引号用双引号结尾)</li>
<li>使用三引号(‘’’ 或 “””)可以指定一个多行字符串，一般是这个格式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">if True:</span><br><span class="line">    print (&quot;True&quot;)</span><br><span class="line">else:</span><br><span class="line">    print (&quot;False&quot;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure></li>
<li>转义符:反斜杠可以用来转义，使用r可以让反斜杠不发生转义。<em>如r”this is a line with \n”则\n会显示,并不是换行。</em></li>
<li>按字面意义级联字符串，如”this””is””string”会被自动转换为this is string。</li>
<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复表达。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li>
<li><strong>Python 中的字符串不能改变。</strong></li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串的截取的语法格式如下：<code>变量[头下标:尾下标:步长]</code></li>
</ul>
<h3 id="布尔类型-bool"><a href="#布尔类型-bool" class="headerlink" title="布尔类型(bool)"></a>布尔类型(bool)</h3><ul>
<li>python中，True和false都是关键字，表示为布尔值</li>
<li>布尔值只有true或者false</li>
<li>布尔值可以和其他数据类型进行比较。在比较时，True视为1，False视为0</li>
</ul>
<h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h3><ul>
<li>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</li>
<li>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</li>
<li>列表截取的语法格式如下：<code>变量[头下标:尾下标]</code></li>
<li>列表中的元素是可以改变的!</li>
</ul>
<h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h3><ul>
<li>元组写在小括号()里，元素之间用逗号隔开</li>
<li>可以把字符串看成一种特殊的元组</li>
</ul>
<h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h3><ul>
<li>set是一种无序，可变的数据类型。用于存储唯一的元素。</li>
<li>集合中的元素，一定不会重复。且可以进行交集并集差集等常见的集合操作。</li>
<li>一个空集合并须用set()创建。直接用{}创建的是一个字典。</li>
</ul>
<h3 id="字典-Dictionary"><a href="#字典-Dictionary" class="headerlink" title="字典(Dictionary)"></a>字典(Dictionary)</h3><ul>
<li>字典是无序的对象集合。字典中的元素是通过键值对进行存取，而不是通过偏移存取。</li>
<li>字典是一种映射类型，用{}标识，它是一个无序的key(键):value(值)的集合。</li>
<li>key必须是不可变类型。同一字典中，key必须是唯一的。</li>
</ul>
<h3 id="bytes类型"><a href="#bytes类型" class="headerlink" title="bytes类型"></a>bytes类型</h3><ul>
<li>bytes 类型表示的是不可变的二进制序列（byte sequence）</li>
<li>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符</li>
</ul>
<h3 id="python中的数据类型转换"><a href="#python中的数据类型转换" class="headerlink" title="python中的数据类型转换"></a>python中的数据类型转换</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>int(x,[base])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合元格</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d 必须是一个 (key, value)元组序列。</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
<h3 id="海象运算符-python3-8引入"><a href="#海象运算符-python3-8引入" class="headerlink" title="海象运算符(python3.8引入)"></a>海象运算符(python3.8引入)</h3><ul>
<li>海象运算符使用 :&#x3D; 表示，它的基本语法是 变量 :&#x3D; 表达式。这个表达式的值就是赋给变量的值，同时这个值也会被返回。这使得在表达式中可以直接使用刚刚赋值的变量，非常方便</li>
</ul>
<h3 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h3><ul>
<li>对列表的数据项进行修改或更新，可以使用 append() 方法来添加列表项</li>
</ul>
<h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><ul>
<li>使用 del 语句来删除列表的的元素</li>
</ul>
<h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><ul>
<li>列表推导式<ul>
<li>列表推导式格式为：<br>  <code>[表达式 for 变量 in 列表]    [out_exp_res for out_exp in input_list]</code><br>  或<br>  <code>[表达式 for 变量 in 列表 if 条件]   [out_exp_res for out_exp in input_list if condition]</code><br>  out_exp_res：列表生成元素表达式，可以是有返回值的函数。<br>  for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。<br>  if condition：条件语句，可以过滤列表中不符合条件的值。</li>
</ul>
</li>
<li>字典推导式<ul>
<li>字典推导基本格式：<br><code>&#123; key_expr: value_expr for value in collection &#125;</code><br>或<br><code>&#123; key_expr: value_expr for value in collection if condition &#125;</code></li>
</ul>
</li>
<li>集合推导式<ul>
<li>集合推导式基本格式：<br><code>&#123; expression for item in Sequence &#125;</code><br>或<br><code>&#123; expression for item in Sequence if conditional &#125;</code></li>
</ul>
</li>
<li>元组推导式（生成器表达式）<ul>
<li>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。</li>
<li>元组推导式基本格式：<br>  <code>(expression for item in Sequence )</code><br>  或<br>  <code>(expression for item in Sequence if conditional )</code></li>
</ul>
</li>
</ul>
<h3 id="Python3-迭代器与生成器"><a href="#Python3-迭代器与生成器" class="headerlink" title="Python3 迭代器与生成器"></a>Python3 迭代器与生成器</h3><ul>
<li>迭代器</li>
</ul>
<h3 id="Python3-函数"><a href="#Python3-函数" class="headerlink" title="Python3 函数"></a>Python3 函数</h3><ul>
<li>定义一个函数<ul>
<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。</li>
<li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。    </li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号 : 起始，并且缩进。</li>
<li>return [表达式] 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</li>
</ul>
</li>
<li>语法<ul>
<li><code>def 函数名（参数列表）: 函数体</code></li>
</ul>
</li>
<li>函数调用<ul>
<li>定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。</li>
</ul>
</li>
<li>可更改(mutable)与不可更改(immutable)对象<ul>
<li>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</li>
<li>不可变类型：变量赋值 a&#x3D;5 后再赋值 a&#x3D;10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li>
<li>可变类型：变量赋值 la&#x3D;[1,2,3,4] 后再赋值 la[2]&#x3D;5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
</li>
<li>参数<ul>
<li>以下是调用函数时可使用的正式参数类型：<ul>
<li>必需参数</li>
<li>关键字参数</li>
<li>默认参数</li>
<li>不定长参数</li>
</ul>
</li>
<li>python 函数的参数传递：<ul>
<li>不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li>
<li>可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
</li>
<li>关键字参数：<ul>
<li>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</li>
<li>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</li>
</ul>
</li>
</ul>
</li>
<li>匿名函数<ul>
<li>Python 使用 lambda 来创建匿名函数。</li>
<li>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</li>
<li>lambda 只是一个表达式，函数体比 def 简单很多。</li>
<li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li>
<li>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，内联函数的目的是调用小函数时不占用栈内存从而减少函数调用的开销，提高代码的执行速度。</li>
</ul>
</li>
<li>语法<ul>
<li>lambda 函数的语法只包含一个语句，如下：</li>
<li><code>lambda [arg1 [,arg2,.....argn]]:expression</code></li>
</ul>
</li>
</ul>
<h3 id="python3数据结构"><a href="#python3数据结构" class="headerlink" title="python3数据结构"></a>python3数据结构</h3><h3 id="python3模块"><a href="#python3模块" class="headerlink" title="python3模块"></a>python3模块</h3><ul>
<li>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</li>
<li>import 语句<ul>
<li>模块的引入<ul>
<li>语法：<code>import module1[, module2[,... moduleN]]</code></li>
<li>引用：<code>模块名.函数名</code></li>
</ul>
</li>
</ul>
</li>
<li>from…import 语句<ul>
<li>语法：<code>from modname import name1[, name2[, ... nameN]]</code></li>
</ul>
</li>
<li>from…import* 语句<ul>
<li>语法：<code>from modname import *</code></li>
</ul>
</li>
</ul>
<h3 id="python文件的I-O"><a href="#python文件的I-O" class="headerlink" title="python文件的I&#x2F;O"></a>python文件的I&#x2F;O</h3><ul>
<li>Python中，I&#x2F;O函数是用于输入和输出操作的函数。这些函数可以让你从文件、网络连接、标准输入等地方读取数据，并将数据写入到文件、网络连接、标准输出等地方</li>
<li><code>open()</code>: 用于打开文件，可以指定文件名、模式等参数来读取或写入文件。</li>
<li><code>input()</code>: 用于从标准输入读取用户输入。</li>
<li><code>print()</code>: 用于将数据输出到标准输出或指定的文件对象。</li>
<li><code>read()</code>: 用于从文件对象中读取指定数量的字节或全部内容。</li>
<li><code>write()</code>: 用于将数据写入文件对象。</li>
<li><code>close()</code>: 用于关闭文件或其他类文件对象，释放资源。</li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><table>
<thead>
<tr>
<th>异常处理概念</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>try-except</td>
<td>捕获并处理代码中的异常</td>
</tr>
<tr>
<td>异常类型</td>
<td>Python提供了多种内置的异常类型</td>
</tr>
<tr>
<td>自定义异常</td>
<td>允许用户创建自定义异常类</td>
</tr>
<tr>
<td>异常处理最佳实践</td>
<td>应尽可能精确地捕获并处理异常</td>
</tr>
<tr>
<td>调试与异常</td>
<td>异常处理是调试Python程序的重要工具</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python高级教程</title>
    <url>/2024/02/26/python%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="python之面向对象"><a href="#python之面向对象" class="headerlink" title="python之面向对象"></a>python之面向对象</h3><ul>
<li>面向对象是什么？<ul>
<li>面向对象编程是一种程序设计规范，以对象作为最基本的程序单元，通过对象之间的交互实现程序。</li>
<li>每个对象都具有自己的属性(状态)和方法(行为)，通过这些属性和方法，对象可以与其他对象进行交互和通信。</li>
</ul>
</li>
<li>python中的类<ul>
<li>语法格式：<ul>
<li><code>class ClassName:   &lt;statement-1&gt;   .   .   .   &lt;statement-N&gt;</code></li>
</ul>
</li>
<li>类对象<ul>
<li>支持两种操作，属性引用和实例化</li>
<li>引用语法：<code>obj.name</code> </li>
<li>类有一个构造方法，<code>__init__()</code>,在类实例化时会自动调用，例如：<code>def __init__(self)           self.data = []</code></li>
<li>self代表类的实例，而不是类。self可以有效地参与链式调用</li>
</ul>
</li>
<li>继承<ul>
<li><code>class DerivedClassName(BaseClassName):   &lt;statement-1&gt;   .   .   .   &lt;statement-N&gt;</code></li>
<li>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="python的命名空间-作用域"><a href="#python的命名空间-作用域" class="headerlink" title="python的命名空间&amp;作用域"></a>python的命名空间&amp;作用域</h3><ul>
<li>命名空间<ul>
<li>内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</li>
<li>全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</li>
<li>局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</li>
<li>查找顺序：：局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间。</li>
</ul>
</li>
<li>作用域<ul>
<li>作用域就是一个 Python 程序可以直接访问命名空间的正文区域。</li>
<li>四种作用域：<ul>
<li>L（Local）：最内层，包含局部变量，比如一个函数&#x2F;方法内部。</li>
<li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li>
<li>G（Global）：当前脚本的最外层，比如当前模块的全局变量。</li>
<li>B（Built-in）： 包含了内建的变量&#x2F;关键字等，最后被搜索。</li>
<li>规则顺序： L –&gt; E –&gt; G –&gt; B。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h3><p>* </p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习</title>
    <url>/2024/02/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>后端学习</title>
    <url>/2024/02/20/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>测试开发学习</title>
    <url>/2024/02/20/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
